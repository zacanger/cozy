let http.constants = {
    "STATUS_CODES": {
        100: "Continue",
        101: "Switching Protocols",
        102: "Processing",
        103: "Early Hints",
        200: "OK",
        201: "Created",
        202: "Accepted",
        203: "Non-Authoritative Information",
        204: "No Content",
        205: "Reset Content",
        206: "Partial Content",
        207: "Multi-Status",
        208: "Already Reported",
        226: "IM Used",
        300: "Multiple Choices",
        301: "Moved Permanently",
        302: "Found",
        303: "See Other",
        304: "Not Modified",
        305: "Use Proxy",
        307: "Temporary Redirect",
        308: "Permanent Redirect",
        400: "Bad Request",
        401: "Unauthorized",
        402: "Payment Required",
        403: "Forbidden",
        404: "Not Found",
        405: "Method Not Allowed",
        406: "Not Acceptable",
        407: "Proxy Authentication Required",
        408: "Request Timeout",
        409: "Conflict",
        410: "Gone",
        411: "Length Required",
        412: "Precondition Failed",
        413: "Payload Too Large",
        414: "URI Too Long",
        415: "Unsupported Media Type",
        416: "Range Not Satisfiable",
        417: "Expectation Failed",
        418: "I'm a Teapot",
        421: "Misdirected Request",
        422: "Unprocessable Entity",
        423: "Locked",
        424: "Failed Dependency",
        425: "Too Early",
        426: "Upgrade Required",
        428: "Precondition Required",
        429: "Too Many Requests",
        431: "Request Header Fields Too Large",
        451: "Unavailable For Legal Reasons",
        500: "Internal Server Error",
        501: "Not Implemented",
        502: "Bad Gateway",
        503: "Service Unavailable",
        504: "Gateway Timeout",
        505: "HTTP Version Not Supported",
        506: "Variant Also Negotiates",
        507: "Insufficient Storage",
        508: "Loop Detected",
        509: "Bandwidth Limit Exceeded",
        510: "Not Extended",
        511: "Network Authentication Required",
    },

    "METHODS": [
        "ACL",
        "BIND",
        "CHECKOUT",
        "CONNECT",
        "COPY",
        "DELETE",
        "GET",
        "HEAD",
        "LINK",
        "LOCK",
        "M-SEARCH",
        "MERGE",
        "MKACTIVITY",
        "MKCALENDAR",
        "MKCOL",
        "MOVE",
        "NOTIFY",
        "OPTIONS",
        "PATCH",
        "POST",
        "PROPFIND",
        "PROPPATCH",
        "PURGE",
        "PUT",
        "REBIND",
        "REPORT",
        "SEARCH",
        "SOURCE",
        "SUBSCRIBE",
        "TRACE",
        "UNBIND",
        "UNLINK",
        "UNLOCK",
        "UNSUBSCRIBE"
    ]
};

let http.server = fn () {
    # 'http.server returns a new app instance.
    # Available methods: route, listen, static.'
    let instance = http.create_server()

    return {
        "route": fn () {
            # 'route takes a path, methods, and callback.
            # Path can be a string or regex. If methods are not provided,
            # the default will be GET. The callback takes a request object and
            # should return a body, status code, content type, and/or headers.'
            mutable opts = []
            foreach x in ... {
                opts = opts.push(x)
            }
            mutable path = ""
            mutable mets = ["GET"]
            mutable handler = fn () { true }

            path = opts[0]
            if len(opts) == 3 {
                mets = opts[1]
                handler = opts[2]
            } else if len(opts) == 2 {
                handler = opts[1]
            }

            instance.route(path, mets, handler)
        },

        "listen": fn () {
            # 'listen takes a port number and an optional callback,
            # which is passed the same port.'
            mutable opts = []
            foreach x in ... {
                opts = opts.push(x)
            }
            if len(opts) > 1 {
                opts[1](opts[0])
                instance.listen(opts[0])
            } else {
                instance.listen(opts[0])
            }
        },

        "static": fn () {
            # 'static takes a directory to serve and an optional mount point.'
            mutable opts = []
            foreach x in ... {
                opts = opts.push(x)
            }
            if len(opts) > 1 {
                instance.static(opts[0], opts[1])
            } else {
                instance.static(opts[0])
            }
        }
    }
}

let http.client = fn () {
    # 'http.client returns a new http client with convenience methods
    # for making requests. See also http.create_client.
    # Each method returned by http.client() takes a url, optionally headers as a
    # hash, and optionally a body.'
    let r = http.create_client

    return {
        "get": fn () {
            # 'get is a convenience method for making GET requests.'
            mutable opts = []
            foreach x in ... {
                opts = opts.push(x)
            }
            return r("GET", opts[0], opts[1], opts[2])
        },

        "post": fn () {
            # 'post is a convenience method for making POST requests.'
            mutable opts = []
            foreach x in ... {
                opts = opts.push(x)
            }
            return r("POST", opts[0], opts[1], opts[2])
        },

        "put": fn () {
            # 'put is a convenience method for making PUT requests.'
            mutable opts = []
            foreach x in ... {
                opts = opts.push(x)
            }
            return r("PUT", opts[0], opts[1], opts[2])
        },

        "patch": fn () {
            # 'patch is a convenience method for making PATCH requests.'
            mutable opts = []
            foreach x in ... {
                opts = opts.push(x)
            }
            return r("PATCH", opts[0], opts[1], opts[2])
        },

        "del": fn () {
            # 'del is a convenience method for making DELETE requests.'
            mutable opts = []
            foreach x in ... {
                opts = opts.push(x)
            }
            return r("DELETE", opts[0], opts[1], opts[2])
        },

        "options": fn () {
            # 'options is a convenience method for making OPTIONS requests.'
            mutable opts = []
            foreach x in ... {
                opts = opts.push(x)
            }
            return r("OPTIONS", opts[0], opts[1], opts[2])
        },

        "head": fn () {
            # 'head is a convenience method for making HEAD requests.'
            mutable opts = []
            foreach x in ... {
                opts = opts.push(x)
            }
            return r("HEAD", opts[0], opts[1], opts[2])
        },
    }
}
