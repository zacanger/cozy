let array.first = fn() {
    # 'array.first returns the first element.'
    assert(len(self) >= 1, "Array contains no values!")

    if (len(self) >= 1) {
        return(self[0]);
    }
};

assert([0,1].first() == 0);
assert(["zac",1].first() == "zac");

let array.rest = fn() {
    # 'array.rest returns all but the first element.'
    mutable result = [];

    if (len(self) >= 1) {
        mutable i = 1;
        for (i < len(self)) {
            result = result.append(self[i]);
            i++;
        }
    }

    return result;
};

assert(len([0,2].rest()) == 1);
assert(len([0,1,2].rest()) == 2);
assert(len([0,1,2,3,4,5].rest()) == 5);
assert(string(["zac", 1].rest()) == "[1]");

let array.last = fn() {
    # 'array.last returns the last element.'
    assert(len(self) >= 1, "Array contains no values!")
    return(self[len(self) - 1]);
};

assert([0,2].last() == 2);

let array.filter = fn(predicate) {
    # 'array.filter takes a predicate which should return a boolean,
    # and returns a new array filtered based on the predicate.'
    mutable i = 0;
    let l = len(self);
    mutable result = [];

    for (i < l) {
        let entry = self[i];
        if (predicate(entry, i)) {
            result = result.append(entry);
        }

        i++;
    }

    return result;
};

# Filter an array and keep only values which are "2".
assert(
fn () {
    mutable a = [ 1, 2, 3 , -1, "zac", 44 ];
    a = a.filter(fn(n) { return n == 2 ; });
    if (string(a) == "[2]") {
        return true;
    } else {
        print(a);
        return false;
    }
}()
);


let array.find = fn(item) {
    # 'array.find returns the offset, or -1, of the specified item in the array.'
    foreach index, value in self {
        if (value == item) {
            return index;
        }
    }

    # not found.
    return -1;
};

assert([1,2,3].find(7) == -1);
assert([1,2,3].find(1) == 0);
assert([1,2,3].find(3) == 2);
assert([1,2,3,3].find(3) == 2);

let array.includes? = fn(obj) {
    # 'array.includes? returns a boolean if the array includes the passed element.'
    return(self.find(obj) != -1);
};

assert([1,2,3].includes?(2));
assert(! [1,2,3].includes?(23));

let array.min = fn() {
    # 'array.min returns the minimum value in the array, or 0.'
    mutable i = 0;

    let l = len(self);
    if (l < 1) {
        return 0;
    }

    # Assume first value is minimum
    mutable min = self[0];

    # type checking.
    if (type(min) != "integer" && type(min) != "float") {
        print("array.min only works on numbers - not " , type(min));
        if !sys.in_repl() {
            sys.exit(1);
        }
    }

    # If we find a smaller one, set it.
    for (i < l) {
        # type checking.
        if (type(self[i]) != "integer" && type(self[i]) != "float") {
            print("array.min only works on numbers - not " , type(self[i]));
            if !sys.in_repl() {
                sys.exit(1);
            }
        }

        if (self[i] < min) {
            min = self[i];
        }

        i++;
    }

    return min;
};

assert(([1,2,3].min() == 1));
assert((1..10.min() == 1));
assert(([-1,-2,-3].min() == -3));
assert(([].min() == 0), "minimum of an empty array is zero");

let array.max = fn() {
    # 'array.max returns the maximum value in the array, or 0.'
    mutable i = 0;

    let l = len(self);
    if (l < 1) {
        return 0;
    }

    # Assume first value is maximum
    mutable max = self[0];

    # ensure we're dealing with types
    if (type(max) != "integer" && type(max) != "float") {
        print("array.max only works on numbers - not " , type(max));
        if !sys.in_repl() {
            sys.exit(1);
        }
    }

    # If we find a greater one, set it.
    for (i < l) {
        # type checking.
        if (type(self[i]) != "integer" && type(self[i]) != "float") {
            print("array.max only works on numbers - not " , type(self[i]), "\n");
            if !sys.in_repl() {
                sys.exit(1);
            }
        }

        if (self[i] > max) {
            max = self[i];
        }

        i++;
    }

    return max;
};

assert((1..15.max() == 15));
assert(([1,2,3].max() == 3));
assert(([-1,-2,-3].max() == -1));
assert(([].max() == 0), "maximum of an empty array is zero");

let array.join = fn(char) {
    # 'array.join joins elements of an array on the passed string.'
    mutable r = "";
    mutable i = 0;
    let l = len(self);

    for (i < l) {
        # If the result is non-empty add the separator.
        if (len(r) > 0) {
            r+= char;
        }

        # add on the next element.
        r += string(self[i]);
        i++;
    }

    return r;
};

assert([1,2,3].join(".") == "1.2.3");
assert([1,2,3].join("") == "123");

let array.reverse = fn() {
    # 'array.reverse reverses the array.'
    mutable r = [];
    mutable l = len(self);

    for (l > 0) {
        r = r.append(self[l-1]);
        l--;
    }
    return r;
};

assert(string([1,2,3].reverse()) == "[3, 2, 1]");

let array.sorted? = fn() {
    # 'array.sorted? returns true if the array is sorted.'
    # Ensure each array-member has the same type.
    mutable tmp = {};
    mutable i = 0;

    # Record the types.
    for (i < len(self)) {
        tmp = tmp.set(type(self[i]), true);
        i++;
    }

    # There can be only one!
    if (len(tmp.keys()) > 1) {
        print("Attempting to check an array with mixed-type values!\n");
        print(string(self));
        if !sys.in_repl() {
            sys.exit(1);
        }
    }

    mutable i = 1;
    let l = len(self);

    # Array of zero/one element is always sorted.
    if (l < 2) {
        return true;
    }

    # If a later item is smaller than the
    # earlier item the array is not sorted.
    for (i < l) {
        if (self[i] < self[i-1]) {
            return false;
        }

        i++;
    }

    return true;
};

assert([-1,0,1].sorted?());
assert([1].sorted?());
assert([].sorted?());

let array.swap = fn(a, b) {
    # 'array.swap swaps the value of two array indexes.'
    let aVal = self[b];
    let bVal = self[a];

    mutable r = [];
    mutable i = 0;
    let l = len(self);

    for (i < l) {
        if (i == a) {
            r = r.append(aVal);
        } else if (i == b) {
            r = r.append(bVal);
        } else {
            r = r.append(self[i]);
        }

        i++;
    }

    return r;
};

assert(
fn () {
    mutable a = [10,20];
    a = a.swap(0,1);
    if (a[0] == 20) { true; } else { false; }
}()
);
assert(
fn () {
    mutable a = [10,20];
    a = a.swap(0,1);
    if (a[1] == 10) { true; } else { false; }
}()
);

let array.sort = fn() {
    # 'array.sort sorts the array.'
    # Ensure each array-member has the same type.
    mutable tmp = {};
    mutable i = 0;

    # Record the types.
    for (i < len(self)) {
        tmp = tmp.set(type(self[i]), true);
        i++;
    }

    # There can be only one!
    if (len(tmp.keys()) > 1) {
        print("Attempting to sort an array with mixed-type values!\n");
        print(string(self));
        if !sys.in_repl() {
            sys.exit(1);
        }
    }

    # While the given array isn't sorted.
    for (! self.sorted?()) {
        # make a pass over the array.
        mutable i = 1;
        let l = len(self);
        for (i < l) {
            # if this element is wrong swap it.
            if (self[i] < self[i-1]) {
                self = self.swap(i - 1, i);
            }

            i++;
        }
    }

    # Should be done now.
    return self;
};

assert(fn () {mutable a = [ 3, 2, 1 ]; a = a.sort(); a.sorted?()}());
assert(fn () {mutable a = [ 3, 2, 1 ]; a = a.sort(); a[0] == 1}());
assert(fn () {mutable a = [ 3, 2, 1 ]; a = a.sort(); a[1] == 2}());
assert(fn () {mutable a = [ 3, 2, 1 ]; a = a.sort(); a[2] == 3}());

let array.map = fn(fnc) {
    # 'array.map returns an array which is the result of applying the
    # passed function to each element in the array. The function should take an
    # item and optionally the index.'
    mutable result = [];

    foreach index, item in self {
        result = result.append(fnc(item, index));
    }

    return result;
};


assert(
fn () {
    mutable a = [3,9,-4];
    a = a.map(fn(n) { return n * n; });
    a = a.sort();
    if (string(a) == "[9, 16, 81]") {
        return true;
    } else {
        return false;
    }
}()
);
assert(
fn () {
    mutable a = [2,-1,-12];
    a = a.map(fn(n) { return n +2; });
    a = a.sort();
    if (string(a) == "[-10, 1, 4]") {
        return true;
    } else {
        return false;
    }
}()
);

let array.uniq = fn() {
    # 'array.uniq returns the unique members of an array.'
    mutable tmp = {};

    foreach item in self {
        tmp = tmp.set(item, true);
    }

    # return the sorted keys
    return(tmp.keys().sort());
};

assert(string([1,1,1,1,2].uniq()) == "[1, 2]");

let array.empty? = fn() {
    # 'array.empty? returns true if the array is empty.'
    if (len(self) == 0) {
        return true;
    }
    return false;
};

assert([].empty?());
assert(![1,2].empty?());
assert(!["zacanger",3].empty?());

let array.reduce = fn(fun, init) {
    # 'array.reduce takes a function and an initial value. The function
    # is passed the current item, the accumulated value, and the current index.'
    mutable acc = init;
    foreach i, x in self {
        acc = fun(x, acc, i);
    }

    return acc;
};

let array.sum = fn() {
    # 'array.sum sums numbers in the array.'
    foreach x in self {
        if (type(x) != "integer" && type(x) != "float") {
            print("Sum expected only integers, got", type(x));
            if !sys.in_repl() {
                sys.exit(1);
            }
        }
    }

    return self.reduce(
        fn(x, acc) {
            return x + acc;
        }, 0);
};

assert([1, 2, 3, 4].sum() == 10, "reduce failed!");
