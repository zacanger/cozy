# the biggest thing missing right now is handling ctx;
# how to pass that around, i'm not sure yet.
# until then, there's no way to actually respond to requests.
# once ctx is figured out, add methods for text(), json(), etc.

let http.server = fn () {
    let instance = http.create_server()
    let id = instance.id

    return {
        "route": fn (opts) {
            let pattern = opts.pattern
            mutable methods = opts.methods
            if !methods {
                methods = ["GET"]
            }
            let handler = opts.handler
            instance.route(id, pattern, methods, handler)
        },
        "listen": fn (opts) {
            let port = opts.port
            intance.listen(id, port)
            if (opts.handler) {
                opts.handler(port)
            }
        },
        "static": fn (opts) {
            if (opts.mount) {
                instance.static(id, opts.dir, opts.mount)
            } else {
                instance.static(id, opts.dir)
            }
        }
    }
}

let app = http.server()
app.static({ "dir": "." })
app.route("/foo", ["GET"], fn (ctx) {
    print(ctx)
})
app.listen({ port: 8000 })
