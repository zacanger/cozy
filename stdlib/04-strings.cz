# string.substr returns the given substring from our input. The length of
# the string to return is optional, and will default to the length available.
let string.substr = fn(start, length = -1) {
    # if there is no length then default to the rest of the string.
    if (length == -1) {
        length = len(self) - start;
    }

    # start must be positive
    if (start < 0) {
        start = 0;
    }

    # if the length of the string is too big then we'll cap it too.
    if (start + length > len(self)) {
        length = len(self) - start ;
    }

    # catch bounding-errors.
    if (start >= len(self)) {
        return "";
    }

    mutable res = "";
    mutable copied = 0;

    for ((start < len(self)) && (copied < length)) {
        res += self[start];
        start++;
        copied++;
    }

    return res;
};

assert("Hello world".substr(1, 4) == "ello" , "string.substr() failed");
assert("Hello world".substr(6) == "world" , "string.substr() failed");
assert("天研".substr(0) == "天研" , "string.substr() failed");
assert("研天".substr(1) == "天" , "string.substr() failed");
assert("天研".substr(2) == "" , "string.substr() failed");
assert("天研".substr(0, 2) == "天研" , "string.substr() failed");
assert("天研".substr(1, 2) == "研" , "string.substr() failed");
assert("天研".substr(1, 100) == "研" , "string.substr() failed");
assert("天研".substr(-1, 100) == "天研" , "string.substr() failed");

# Remove leading whitespace from the string.
let string.ltrim = fn() {
    let reg = "^(\\s+)(.*)$";
    let out = match(reg, self);

    if (out) {
        return(out[2]);
    } else {
        return self;
    }
};

assert(("  天研  ".ltrim() == "天研  "), "string.ltrim failed");
assert(("  zac  ".ltrim() == "zac  "), "string.ltrim failed");

# Remove trailing whitespace from the string.
let string.rtrim = fn() {
    let reg = "^(.*?)(\\s*)$";
    let out = match(reg, self);

    if (out) {
        return(out[1]);
    } else {
        return self;
    }
};
assert(("  天研  ".rtrim() == "  天研"), "string.rtrim failed");

# string.find returns the offset of the given substring
# or -1 if it isn't found.
let string.find = fn(needle) {
    # get details about ourself
    mutable i = 0;
    let l = len(self);

    # the length of our search string.
    let L = len(needle);

    # get a substring at each possible position
    for (i < l) {
        let possible = self.substr(i, L);
        # does this match?
        if (possible == needle) {
            return i;
        }

        i++;
    }

    return -1;
};

assert("\"zac\".find(\"a\") == 1");
assert("\"zac\".find(\"c\") == 2");
assert("\"zac\".find(\"anger\") == -1");
assert("\"天研\".find(\"天研\") == 0");
assert("\"st天eve研es\".find(\"研\") == 6");

# string.interpolate replaces ${blah} with the value of "blah" from
# the specified hash.
# TODO: this is broken, maybe due to the match change to return an array?
let string.interpolate = fn(hsh) {
    let reg = "(?s)^(.*?)\\$\\{([^\\}]+)\\}(.*)";
    let out = match(reg, self);

    for (out) {
        let pre = out[0];
        let tok = out[1];
        let pst = out[2];
        let self = pre + string(hsh[tok]) + pst;
        let out = match(reg, self);
    }

    return self;
};

# string.split returns an array splitting on any characters included
# in the separator string.
# By default the split is on whitespace: " ", "TAB", & "RETURN".
let string.split = fn(sep = " \r\t\n") {
    mutable i = 0;
    let l = len(self);
    mutable r = [];

    mutable tmp = "";

    for (i < l) {
        # get the character.
        let c = self[i];

        # is the character one of our split-characters?
        if (sep.find(c) != -1) {

            # push any previously-accumulated token into our array.
            if (len(tmp) > 0) {
                r = r.push(tmp);
            }
            tmp = "";

        } else {
            # store the character into our accumulator.
            tmp += c;
        }

        i++;
    }

    # Do we have a dangling-string? If so append it.
    if (len(tmp) > 0) {
        r = r.push(tmp);
    }

    return r;
};

assert("len(\"1 2 3\".split()) == 3");
assert("type(\"1 2 3\".split(\"2\")) == \"array\"");

# string.replace removes a value from a string, replacing it with a new value.
let string.replace = fn(old, new) {
    mutable s = self;
    mutable index = s.find(old);

    for (index >= 0) {
        # get the prefix
        let pre = s.substr(0, index);

        # get the suffix
        let suf = s.substr(index + len(old));

        s = pre + new + suf;

        index = s.find(old);
    }

    return s;
};

assert("zac".replace("a", "A") == "zAc", "string.replace() failed");
assert("zac".replace("A", "Q") == "zac", "string.replace() failed");

# Trim leading & trailing whitespace from the given string.
let string.trim = fn() {
    return self.ltrim().rtrim();
};

assert("  ".trim() == "", "string.trim failed");
assert(" 1 ".trim() == "1", "string.trim failed");

# Convert the given string to lower-case.
let string.tolower = fn() {
    mutable r = "";

    foreach char in self {
        if (char >= "A" && char <= "Z") {
            char = char.ord();
            char += 32;
            char = char.chr();
        }

        r += char;
    }

    return r;
};

assert("Zac".tolower() == "zac", "string.tolower() failed");
assert("天研".tolower() == "天研", "string.tolower() failed");

# Convert the given string to upper-case.
let string.toupper = fn() {
    mutable r = "";

    foreach char in self {
        if (char >= "a" && char <= "z") {
            char = char.ord();
            char -= 32;
            char = char.chr();
        }

        r += char;
    }

    return r;
};

assert("zac".toupper() == "ZAC", "string.toupper() failed");
assert("天研".toupper() == "天研", "string.toupper() failed");

# Count occurences of the given character in the string.
let string.count = fn(char) {
    mutable c = 0;

    foreach chr in self {
        if (chr == char) {
            c += 1;
        }
    }

    return c;
};

assert("\"zac\".count(\"a\") == 1");
assert("\"zac\".count(\"E\") == 0");
assert("\"研天\".count(\"天\") == 1");
assert("\"研研研研研研天\".count(\"研\") == 6");

# Repeat a string N times.
let string.repeat = fn(count) {
    mutable r = "";

    if (count < 1) {
        return self;
    }

    for (count > 0) {
        r += self;
        count--;
    }

    return r;
};

assert(("天研".repeat(3) == "天研天研天研"), "string.repeat failed");
assert(("*".repeat(1) == "*"), "string.repeat failed");
assert(("*".repeat(0) == "*"), "string.repeat failed");
assert(("*".repeat(-1) == "*"), "string.repeat failed");

# Reverse a string,
let string.reverse = fn() {
    mutable r = "";
    mutable l = len(self);

    for (l > 0) {
        r += self[l-1];
        l--;
    }

    return r;
};

assert(("天研".reverse() == "研天"), "string.reverse failed");
assert(("322".reverse() == "223"), "string.reverse failed");

let string.includes? = fn(s) {
    return(self.find(s) != -1);
};

assert("123".includes?("1"));
