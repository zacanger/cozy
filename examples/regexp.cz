# TODO: allow match to take a regex literal
# Get rid of !~ and ~= operators?

# Substring match
if (match("nge", "Zac Anger")) {
   print("Match found");
}

# Suffix Match
if (match("ger$", "Zac Anger")) {
   print("Suffix-match OK");
}

# Prefix-match
if (match("^[A-Z]", "Zac Anger")) {
   print("Prefix-match OK");
}

# IP-address regexp
let reg = "([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$";
let out = match(reg, "12.23.21.224");
if (out) {
   print("We matched an IP address succesfully.");
   print("Captures: ", out.rest().join(" . "))
} else {
   print("Not true!");
}

# The same thing using literal a regular expression
let ip = "192.168.1.1";

# TODO: need a space before the closing paren,
# otherwise it breaks.
if (ip ~= /([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/ ) {
   printf("We matched an IP address succesfully.");
   # Matches are available only within this scope
   printf("Captures: %s.%s.%s.%s\n", $1, $2, $3, $4);
}
# Also works storing a regex in a variable
let re = /([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/;
print(type(re));
