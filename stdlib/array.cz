# First element of an array
let array.first = fn() {
    assert(len(self) >= 1, "Array contains no values!")

    if (len(self) >= 1) {
        return(self[0]);
    }
};

assert("[0,1].first() == 0");
assert("[\"zac\",1].first() == \"zac\"");

# The rest of an array - i.e. all elements EXCEPT the first
let array.rest = fn() {
    mutable result = [];

    if (len(self) >= 1) {
        mutable i = 1;
        for (i < len(self)) {
            result = push(result, self[i]);
            i++;
        }
    }

    return result;
};

assert("len([0,2].rest()) == 1");
assert("len([0,1,2].rest()) == 2");
assert("len([0,1,2,3,4,5].rest()) == 5");
assert("string([\"zac\", 1].rest()) == \"[1]\"");

# Last element of an array
let array.last = fn() {
    assert(len(self) >= 1, "Array contains no values!")
    return(self[len(self) - 1]);
};

assert("[0,2].last() == 2");

# Call the given function on each entry, and return an array of the
# items for which the predicate returned true.
let array.filter = fn(predicate) {
    mutable i = 0;
    let l = len(self);
    mutable result = [];

    for (i < l) {
        let entry = self[i];
        if (predicate(entry)) {
            result = push(result, entry);
        }

        i++;
    }

    return result;
};

# Filter an array and keep only values which are "2".
assert("
mutable a = [ 1, 2, 3 , -1, \"zac\", 44 ];
a = a.filter(fn(n) { return n == 2 ; });
if (string(a) == \"[2]\") {
    return true;
} else {
    print(a);
    return false;
}
");


# Return the offset, if any, of the specified item in the array.
let array.find = fn(item) {
    foreach index, value in self {
        if (value == item) {
            return index;
        }
    }

    # not found.
    return -1;
};

assert("[1,2,3].find(7) == -1");
assert("[1,2,3].find(1) == 0");
assert("[1,2,3].find(3) == 2");
assert("[1,2,3,3].find(3) == 2");

# Does the given value exist inside the array?
let array.includes? = fn(obj) {
    return(self.find(obj) != -1);
};

assert("[1,2,3].includes?(2)");
assert("! [1,2,3].includes?(23)");

# Find minimum value in array
let array.min = fn() {
    mutable i = 0;

    let l = len(self);
    if (l < 1) {
        return 0;
    }

    # Assume first value is minimum
    mutable min = self[0];

    # type checking.
    if (type(min) != "integer" && type(min) != "float") {
        print("array.min only works on numbers - not " , type(min));
        exit(1);
    }

    # If we find a smaller one, set it.
    for (i < l) {
        # type checking.
        if (type(self[i]) != "integer" && type(self[i]) != "float") {
            print("array.min only works on numbers - not " , type(self[i]));
            exit(1);
        }

        if (self[i] < min) {
            min = self[i];
        }

        i++;
    }

    return min;
};

assert("([1,2,3].min() == 1)");
assert("(1..10.min() == 1)");
assert("([-1,-2,-3].min() == -3)");
assert("([].min() == 0)", "minimum of an empty array is zero");

# Find maximum value in array
let array.max = fn() {
    mutable i = 0;

    let l = len(self);
    if (l < 1) {
        return 0;
    }

    # Assume first value is maximum
    mutable max = self[0];

    # ensure we're dealing with types
    if (type(max) != "integer" && type(max) != "float") {
        print("array.max only works on numbers - not " , type(max));
        exit(1);
    }

    # If we find a greater one, set it.
    for (i < l) {
        # type checking.
        if (type(self[i]) != "integer" && type(self[i]) != "float") {
            print("array.max only works on numbers - not " , type(self[i]), "\n");
            exit(1);
        }

        if (self[i] > max) {
            max = self[i];
        }

        i++;
    }

    return max;
};

assert("(1..15.max() == 15)");
assert("([1,2,3].max() == 3)");
assert("([-1,-2,-3].max() == -1)");
assert("([].max() == 0)", "maximum of an empty array is zero");

# Join the elements of an array by the given string.
let array.join = fn(char) {
    mutable r = "";
    mutable i = 0;
    let l = len(self);

    for (i < l) {
        # If the result is non-empty add the separator.
        if (len(r) > 0) {
            r+= char;
        }

        # add on the next element.
        r += string(self[i]);
        i++;
    }

    return r;
};

assert("[1,2,3].join(\".\") == \"1.2.3\"");
assert("[1,2,3].join(\"\") == \"123\"");

# Reverse an array.
let array.reverse = fn() {
    mutable r = [];
    mutable l = len(self);

    for (l > 0) {
        let r = push(r, self[l-1]);
        l--;
    }
    return r;
};

assert("string([1,2,3].reverse()) == \"[3, 2, 1]\"");

# sorted? returns true if the specified array is sorted.
let array.sorted? = fn() {
    # Ensure each array-member has the same type.
    mutable tmp = {};
    mutable i = 0;

    # Record the types.
    for (i < len(self)) {
        tmp = set(tmp, type(self[i]), true);
        i++;
    }

    # There can be only one!
    if (len(keys(tmp)) > 1) {
        print("Attempting to check an array with mixed-type values!\n");
        print(string(self));
        exit(1);
    }

    mutable i = 1;
    let l = len(self);

    # Array of zero/one element is always sorted.
    if (l < 2) {
        return true;
    }

    # If a later item is smaller than the
    # earlier item the array is not sorted.
    for (i < l) {
        if (self[i] < self[i-1]) {
            return false;
        }

        i++;
    }

    return true;
};

assert("[-1,0,1].sorted?()");
assert("[1].sorted?()");
assert("[].sorted?()");

# Swap the value of two array indexes.
#
# This is used by our sorting function. Currently it isn't possible
# to mutate an array-member in-place. So we create a new array
# correctly swapping the values at the given index.
#
# This would be easier if we had "elseif" support, or even a case
# statement. (Due to the nested if usage here.)
let array.swap = fn(a, b) {
    let aVal = self[b];
    let bVal = self[a];

    mutable r = [];
    mutable i = 0;
    let l = len(self);

    for (i < l) {
        if (i == a) {
            r = push(r, aVal);
        } else if (i == b) {
            r = push(r, bVal);
        } else {
            r = push(r, self[i]);
        }

        i++;
    }

    return r;
};

assert("mutable a = [10,20]; a = a.swap(0,1); if (a[0] == 20) { true; } else { false; }");
assert("mutable a = [10,20]; a = a.swap(0,1); if (a[1] == 10) { true; } else { false; }");


# Sort the given array.
# This is grossly inefficient, obviously.
let array.sort = fn() {
    # Ensure each array-member has the same type.
    mutable tmp = {};
    mutable i = 0;

    # Record the types.
    for (i < len(self)) {
        tmp = set(tmp, type(self[i]), true);
        i++;
    }

    # There can be only one!
    if (len(keys(tmp)) > 1) {
        print("Attempting to sort an array with mixed-type values!\n");
        print(string(self));
        exit(1);
    }

    # While the given array isn't sorted.
    for (! self.sorted?()) {
        # make a pass over the array.
        mutable i = 1;
        let l = len(self);
        for (i < l) {
            # if this element is wrong swap it.
            if (self[i] < self[i-1]) {
                self = self.swap(i - 1, i);
            }

            i++;
        }
    }

    # Should be done now.
    return self;
};

assert("mutable a = [ 3, 2, 1 ]; a = a.sort(); a.sorted?()");
assert("mutable a = [ 3, 2, 1 ]; a = a.sort(); a[0] == 1");
assert("mutable a = [ 3, 2, 1 ]; a = a.sort(); a[1] == 2");
assert("mutable a = [ 3, 2, 1 ]; a = a.sort(); a[2] == 3");

# Return an array containing the result of applying the specified
# function to each element in the array.
let array.map = fn(fnc) {
    mutable result = [];

    foreach item in self {
        result = push(result, fnc(item));
    }

    return result;
};


assert("
mutable a = [3,9,-4];
a = a.map(fn(n) { return n * n; });
a = a.sort();
if (string(a) == \"[9, 16, 81]\") {
    return true;
} else {
    return false;
}
");
assert("
mutable a = [2,-1,-12];
a = a.map(fn(n) { return n +2; });
a = a.sort();
if (string(a) == \"[-10, 1, 4]\") {
    return true;
} else {
    return false;
}
");

# array.uniq returns the unique members of an array.
let array.uniq = fn() {
    mutable tmp = {};

    foreach item in self {
        tmp = set(tmp, item, true);
    }

    # return the sorted keys
    return(tmp.keys().sort());
};

assert("string([1,1,1,1,2].uniq()) == \"[1, 2]\"");

# Convert a float to an integer.
# Like Go we discard the value after the period, so 4.9 will become 4.
let float.to_i = fn() {
    return(int(self));
};

assert("type(3.1.to_i()) == \"integer\"");
assert("let a = 3.1; if (a.to_i() == 3) { return true; } else { return false; }");

# Is the given array empty?
let array.empty? = fn() {
    if (len(self) == 0) {
        return true;
    }
    return false;
};

assert("[].empty?()");
assert("![1,2].empty?()");
assert("![\"zacanger\",3].empty?()");

# Is the given hash empty?
let hash.empty? = fn() {
    if (len(self.keys()) == 0) {
        return true;
    }
    return false;
};

assert("{}.empty?()");
assert("! {\"name\":\"zac\"}.empty?()");


# Convert an integer to a float.
let integer.to_f = fn() {
    return(self + 0.0);
};

assert("type(3.to_f()) == \"float\"");
assert("3.to_f() == 3.0");

# Count occurences of the given character in the string.
let string.count = fn(char) {
    mutable c = 0;

    foreach chr in self {
        if (chr == char) {
            c += 1;
        }
    }

    return c;
};

assert("\"zac\".count(\"a\") == 1");
assert("\"zac\".count(\"E\") == 0");
assert("\"研天\".count(\"天\") == 1");
assert("\"研研研研研研天\".count(\"研\") == 6");

# Remove leading whitespace from the string.
let string.ltrim = fn() {
    let reg = "^(\\s+)(.*)$";
    let out = match(reg, self);

    if (out) {
        return(out[1]);
    } else {
        return self;
    }
};

assert(("  天研  ".ltrim() == "天研  "), "string.ltrim failed");
assert(("  zac  ".ltrim() == "zac  "), "string.ltrim failed");

# Repeat a string N times.
let string.repeat = fn(count) {
    mutable r = "";

    if (count < 1) {
        return self;
    }

    for (count > 0) {
        r += self;
        count--;
    }

    return r;
};

assert(("天研".repeat(3) == "天研天研天研"), "string.repeat failed");
assert(("*".repeat(1) == "*"), "string.repeat failed");
assert(("*".repeat(0) == "*"), "string.repeat failed");
assert(("*".repeat(-1) == "*"), "string.repeat failed");

# Reverse a string,
let string.reverse = fn() {
    mutable r = "";
    mutable l = len(self);

    for (l > 0) {
        r += self[l-1];
        l--;
    }

    return r;
};

assert(("天研".reverse() == "研天"), "string.reverse failed");
assert(("322".reverse() == "223"), "string.reverse failed");

# Remove trailing whitespace from the string.
let string.rtrim = fn() {
    let reg = "^(.*?)(\\s*)$";
    let out = match(reg, self);

    if (out) {
        return(out[0]);
    } else {
        return self;
    }
};

assert(("  天研  ".rtrim() == "  天研"), "string.rtrim failed");

# string.substr returns the given substring from our input. The length of
# the string to return is optional, and will default to the length available.
let string.substr = fn(start, length = -1) {
    # if there is no length then default to the rest of the string.
    if (length == -1) {
        length = len(self) - start;
    }

    # start must be positive
    if (start < 0) {
        start = 0;
    }

    # if the length of the string is too big then we'll cap it too.
    if (start + length > self.len()) {
        length = len(self) - start ;
    }

    # catch bounding-errors.
    if (start >= len(self)) {
        return "";
    }

    mutable res = "";
    mutable copied = 0;

    for ((start < len(self)) && (copied < length)) {
        res += self[start];
        start++;
        copied++;
    }

    return res;
};

assert("Hello world".substr(1, 4) == "ello" , "string.substr() failed");
assert("Hello world".substr(6) == "world" , "string.substr() failed");
assert("天研".substr(0) == "天研" , "string.substr() failed");
assert("研天".substr(1) == "天" , "string.substr() failed");
assert("天研".substr(2) == "" , "string.substr() failed");
assert("天研".substr(0, 2) == "天研" , "string.substr() failed");
assert("天研".substr(1, 2) == "研" , "string.substr() failed");
assert("天研".substr(1, 100) == "研" , "string.substr() failed");
assert("天研".substr(-1, 100) == "天研" , "string.substr() failed");

# Reduce. The fun should take an item and the accumulator.
let array.reduce = fn(fun, init) {
    mutable acc = init;
    foreach _, x in self {
        acc = fun(x, acc);
    }

    return acc;
};

let array.sum = fn() {
    foreach x in self {
        if (type(x) != "integer" && type(x) != "float") {
            print("Sum expected only integers, got", type(x));
            exit(0);
        }
    }

    return self.reduce(
        fn(x, acc) {
            return x + acc;
        }, 0);
};

assert([1, 2, 3, 4].sum() == 10, "reduce failed!");
